# THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT MANUALLY.

from typing import Any, List, Mapping, Optional, Tuple, Union

from collections import OrderedDict
from enum import Enum
from ruamel.yaml import comments

SpecNode = comments.CommentedMap


def get_comment_value(node: SpecNode, *, name: str, field: str) -> str: ...

class ActionType(Enum): ...

class Suite(OrderedDict):
    points = ...  # type: Union[int, float]

    def __init__(self, spec: str) -> None: ...

    def parse(self, content: str) -> None: ...

    def add_case(self, case: TestCase) -> None: ...

    def run(self, *, quiet: Optional[bool] = ...) -> Mapping[str, Any]: ...

class TestCase:
    name = ...     # type: str
    command = ...  # type: str
    script = ...   # type: List[Action]
    timeout = ...  # type: Optional[int]
    returns = ...  # type: Optional[int]
    points = ...   # type: Optional[Union[int, float]]
    blocker = ...  # type: bool
    visible = ...  # type: bool

    def __init__(
            self,
            name: str,
            *,
            command: str,
            timeout: Optional[int] = ...,
            returns: Optional[int] = ...,
            points: Optional[Union[int, float]] = ...,
            blocker: Optional[bool] = ...,
            visible: Optional[bool] = ...
    ) -> None: ...

    def add_action(self, action: Action) -> None: ...

    def run(
            self,
            *,
            jailed: Optional[bool] = ...
    ) -> Mapping[str, Union[str, List[str]]]: ...

    def run_script(self, command: str) -> Tuple[int, List[str]]: ...

class Action:
    type_ = ...    # type: ActionType
    data = ...     # type: str
    timeout = ...  # type: Optional[int]

    def __init__(
            self,
            type_: ActionType,
            data: str,
            *,
            timeout: Optional[int] = ...
    ) -> None: ...

    def as_tuple(self) -> Tuple[str, str, int]: ...

def setup_logging(*, debug: bool, log: bool) -> None: ...

def main(argv: Optional[List[str]] = ...) -> None: ...
