# THIS FILE IS AUTOMATICALLY GENERATED, DO NOT EDIT MANUALLY.

from typing import Any, List, Mapping, Optional, Tuple, Union

from collections import OrderedDict
from enum import Enum

import ruamel.yaml.comments

ConfigNode = ruamel.yaml.comments.CommentedMap


class ActionType(Enum): ...

class TestSuite(OrderedDict):
    points = ...  # type: int

    def __init__(self) -> None: ...

    def add_case(self, case: TestCase) -> None: ...

    def run(self, *, quiet: Optional[bool] = ...) -> Mapping[str, Any]: ...

class TestCase:
    name = ...     # type: str
    command = ...  # type: str
    script = ...   # type: List[Action]
    timeout = ...  # type: int
    returns = ...  # type: int
    points = ...   # type: int
    blocker = ...  # type: bool
    visible = ...  # type: bool

    def __init__(
            self,
            name: str,
            *,
            command: str,
            timeout: Optional[int] = ...,
            returns: Optional[int] = ...,
            points: Optional[int] = ...,
            blocker: Optional[bool] = ...,
            visible: Optional[bool] = ...
    ) -> None: ...

    def add_action(self, action: Action) -> None: ...

    def run(
            self,
            *,
            jailed: Optional[bool] = ...
    ) -> Mapping[str, Union[str, List[str]]]: ...

    def run_script(self, command: str) -> Tuple[int, List[str]]: ...

class Action:
    type_ = ...    # type: ActionType
    data = ...     # type: str
    timeout = ...  # type: int

    def __init__(
            self,
            type_: ActionType,
            data: str,
            *,
            timeout: Optional[int] = ...
    ) -> None: ...

    def as_tuple(self) -> Tuple[str, str, int]: ...

def get_comment_value(node: ConfigNode, *, name: str, field: str) -> str: ...

def parse_spec(source: str) -> TestSuite: ...

def setup_logging(*, debug: bool, log: bool) -> None: ...

def main(argv: Optional[List[str]] = ...) -> None: ...
